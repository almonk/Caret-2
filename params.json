{"name":"Caret-2","body":"![Caret2](http://f.cl.ly/items/3M1k022P3v3G3F1M2I1P/caret2.png)\r\n\r\nCaret 2 is a little CMS, built in CodeIgniter, that allows you to quickly add a simple content management system to a website without the need for a database and with very little configuration.\r\n\r\n## Installation\r\n\r\nThe quickest way to get started on your local machine is with MAMP or XAMPP. Clone Caret into your htdocs directory:\r\n\r\n\tgit clone https://almonk@github.com/almonk/Caret-2.git caret2\r\n\t\r\nNow browse to <code>http://localhost/caret2</code> and you should see the **'FFFUU It works!'** screen.\r\n\r\n## Configuration\r\n\r\n### Step 1: Edit the config file\r\n\r\nIf your configuration is a little different, and it probably will be, open up the config file at <code>core/application/config/config.php</code>.\r\n\r\nYou'll see something like this:\r\n\r\n\t/*\r\n\t|--------------------------------------------------------------------------\r\n\t| Base Site URL\r\n\t|--------------------------------------------------------------------------\r\n\t|\r\n\t| URL to your CodeIgniter root. Typically this will be your base URL,\r\n\t| WITH a trailing slash:\r\n\t|\r\n\t|\thttp://example.com/\r\n\t|\r\n\t| If this is not set then CodeIgniter will guess the protocol, domain and\r\n\t| path to your installation.\r\n\t|\r\n\t*/\r\n\t$config['base_url']\t= 'http://localhost/caret2/';\r\n\t\r\n\t\r\nChange the value of <code>$config['base_url']</code> to reflect the URL to your Caret installation.\r\n\r\n### Step 2: Edit the .htaccess file\r\n\r\nIn the root of your Caret installation, open up the .htaccess file. You'll see something like this:\r\n\r\n\tRewriteEngine on\r\n\tRewriteCond $1 !^(index\\.php|public|images|robots\\.txt)\r\n\tRewriteRule ^(.*)$ /caret2/index.php/$1 [L]\r\n\t\r\nChange the string <code>/caret2</code> to the name of your subfolder or, if you want Caret to run in the root of your domain remove it entirely (leaving just index.php).\r\n\r\n<hr/>\r\n\r\n## Writing content\r\n\r\nEverything from the content to the assets and templates of your site are kept (by default) in the <code>site/</code> directory (we'll refer to this as the 'theme'). You can change the name of this folder within the <code>core/application/config/config.php</code> file.\r\n\r\n### Pages\r\n\r\nPages are where all your content lives. They are simple yaml files found within the <code>/site/content</code> directory. Let's go ahead and write our first page, it will be an about page, so we'll give it the filename <code>index.yaml</code>.\r\n\r\nNow the file has been created, we'll enter some content...\r\n\r\n\tTitle: Homepage\r\n\tTemplate: default\r\n\tBody: We are a small company founded in 1989...\r\n\r\n<div>\r\n    <strong>Remember!</strong> Your page defines which layout renders it using the <code>Template:</code> key\r\n</div>\r\n\r\nNote that the folder structure in this directory corresponds exactly to your URL structure so that if we put an <code>index.yaml</code> file within <code>site/content/about</code> that page could be found at <code>http://localhost/caret2/about</code>\r\n\r\nNow, we need to display that content with a template.\r\n\r\n### Relation to templates\r\n\r\n![Templates v Content](http://f.cl.ly/items/2F2q2a3y1y1w2p2p1R08/caret21.png)\r\n\r\nTemplates are HTML files found within the <code>/site/templates</code> directory. These files prescribe how your content is rendered. Caret uses the [h2o templating language](http://www.h2o-template.org/), which keeps things clean & simple.\r\n\r\nOur about page created above will be looking for a template called <code>default.hmtml</code>, so lets create that and fill it with a skeletal layout.\r\n\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t<head>\r\n\t\t<meta charset=utf-8 />\r\n\t\t<title>{{ page.title }}</title>\r\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"{{ config.theme_root }}assets/css/master.css\" />\r\n\t</head>\r\n\t<body>\r\n\t\t<h1>{{ page.title }}</h1>\r\n\r\n\t\t{{ page.body }}\r\n\t</body>\r\n\t</html>\r\n\r\nNow, if you visit <code>http://localhost/caret2/</code>, you should see your template rendered with the data from your about page pulled in. Magic.\r\n\r\n<hr/>\r\n\r\n## Tags\r\nTags are written in your templates and help you do various things with your data. \r\nFor a full list of h2o tags, please see this list, this page covers tags **unique to Caret only**.\r\n\r\n### get_from tag\r\nThis tag allows you to grab data from any page of your Caret site. You could use it to avoid duplicating content in your pages. It takes the slug as the only parameter to find the page.\r\n\r\nFor example, if we wanted to get the telephone number from our home page, we could use the following code in any page.\r\n\r\n\t{% get_from index %}\r\n\t\t{{ get.phone }}\r\n\t{% end get_from %}\r\n\r\n<hr/>\r\n\r\n### children_of tag (experimental)\r\nThis tag fetches children from a specified slug and returns them as an array. For example, if I had the site structure:\r\n\r\n\t/ content\r\n\t\tindex.yaml\r\n\t\t/about\r\n\t\t\tindex.yaml\r\n\t\t\tour-manifesto.yaml\r\n\t\t\thistory.yaml\r\n\r\n…I could use the following code in my templates to create a sidebar that links to all the pages under 'about'.\r\n\r\n\t{% children_of about %}\r\n\t\t<ul>\r\n\t\t\t{% for child in children %}\r\n\t\t\t    <li>{{ child.title | links_to child.url }}</li>\r\n\t\t\t{% endfor %}\r\n\t\t</ul>\r\n\t{% end children_of %}\r\n\r\nThis produces the following html:\r\n\r\n\t<ul>\r\n\t\t<li><a href=\"about/\">About us</a></li>\r\n\t\t<li><a href=\"about/our-manifesto\">Our manifesto</a></li>\r\n\t\t<li><a href=\"about/our-history\">Our history</a></li>\r\n\t</ul>\r\n\r\n\r\n## Filters\r\n\r\nFilters are used to modify the output of Caret. H2o has some built in filters, but here we'll focus on the ones exclusive to Caret.\r\n\r\n### Markdown\r\n\r\nFiltering your data through the inbuilt Markdown parser is simple and helps to keep your yaml files HTML free. Filters are added using the pipe symbol ( **|** ), so if we wanted to parse the contents of our <code>{{ page.body }}</code>, we'd do it like this.\r\n\r\n    {{ page.body | markdown }}\r\n\r\n<hr/>\r\n\r\n## Environment variables\r\n\r\nCaret injects various variables into templates to make your life easier; <code>page</code> which relates to all the data defined in your yaml file for the currently viewed page, and <code>config</code> which contains information about your configuration.\r\n\r\n### page\r\nContains all the variables pertaining to the current page. Say for example you create a yaml file within pages called about.yaml. Your page might look something like this:\r\n\r\n\tTitle: About us\r\n\tTemplate: default\r\n\tBody: We are a small company situated in Greater London\r\n\t...\r\n\r\nIf I wanted to output the body text, within my template you'd write <code>{{ page.body }}</code>.\r\n\r\nOther page variables:\r\n\r\n- <code>{{ page.url }}</code> - The page's url within the site, e.g. <code>http://localhost/caret2/about</code>\r\n\r\n\r\n### session\r\nThe session variables holds information about the current session:\r\n\r\n- <code>{{ session.url }}</code> - The current url being viewed. This could be used to create 'active' states for navigation\r\n- <code>{{ session.segments }}</code> - Returns an array of segments to the current page\r\n\r\n\r\n### config\r\n\r\nCaret injects three variables to each template:\r\n\r\n- <code>{{ config.root }}</code> - The base url of the site e.g. http://localhost/caret2/\r\n- <code>{{ config.theme_root }}</code> - The base url of the theme e.g. http://localhost/caret2/site/\r\n\r\nThese variables are useful for using in your templates to point to other resources, e.g.\r\n\r\n    <link rel=\"stylesheet\" href=\"{{ config.theme_root }}assets/css/bootstrap.css\">\r\n    <link rel=\"stylesheet\" href=\"{{ config.theme_root }}assets/css/style.css\">\r\n\r\n\t…\r\n\r\n\t<a href=\"{{ config.root }}\">Go home</a>\r\n\r\n<hr/>\r\n\r\n## About\r\nCaret is a little project by [Alasdair Monk](http://alasdairmonk.com), it is entirely free of charge for use in personal or commercial projects.","tagline":"A NoDB, Yaml based CMS","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}